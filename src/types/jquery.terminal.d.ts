/// <reference types="jquery" />

interface JQueryTerminalOptions {
    greetings?: string | boolean;
    prompt?: string;
    name?: string;
    height?: number;
    width?: number;
    enabled?: boolean;
    mask?: boolean | string;
    checkArity?: boolean;
    convertLinks?: boolean;
    exit?: boolean;
    clear?: boolean;
    execute?: boolean;
    keypress?: (e: KeyboardEvent, terminal: any) => void;
    keydown?: (e: KeyboardEvent, terminal: any) => void;
    onCommandNotFound?: (command: string, terminal: any) => void;
    onBeforeCommand?: (command: string, terminal: any) => void;
    onAfterCommand?: (command: string, terminal: any) => void;
    completion?: boolean | string[] | ((command: string, callback: (candidates: string[]) => void) => void);
    history?: boolean;
    historySize?: number;
    wordAutocomplete?: boolean;
    caseSensitiveAutocomplete?: boolean;
    caseSensitiveSearch?: boolean;
    onInit?: (terminal: any) => void;
    onClear?: (terminal: any) => void;
    onBlur?: (terminal: any) => void;
    onFocus?: (terminal: any) => void;
    onExit?: (terminal: any) => void;
    onPush?: (terminal: any, options: any) => void;
    onPop?: (terminal: any, options: any) => void;
    scrollOnEcho?: boolean;
    login?: (user: string, password: string, callback: (success: boolean) => void) => void;
    outputLimit?: number;
    pauseEvents?: boolean;
    softPause?: boolean;
    memory?: boolean;
    cancelableAjax?: boolean;
    processArguments?: boolean;
    linksNoReferrer?: boolean;
    mobileIngoreAutoSpace?: boolean | string[];
    formatters?: any[];
    exceptionHandler?: (exception: any, label: string) => void;
    onRPCError?: (error: any) => void;
    request?: any;
    response?: any;
}

interface JQueryTerminal {
    (commands?: { [key: string]: Function | string }, options?: JQueryTerminalOptions): JQuery;
    (command: string): JQuery;
    (command: string, fn: Function | string): JQuery;
    (command: string, description: string, fn: Function): JQuery;
    echo(arg: any, options?: any): JQuery;
    error(message: string): JQuery;
    exception(e: any, label?: string): JQuery;
    pause(): JQuery;
    resume(): JQuery;
    cols(): number;
    rows(): number;
    clear(): JQuery;
    clear_history(): JQuery;
    destroy(): JQuery;
    scroll(amount: number): JQuery;
    focus(): JQuery;
    blur(): JQuery;
    login(callback: (user: string, password: string, cb: (success: boolean) => void) => void, options?: any): JQuery;
    logout(): JQuery;
    token(): string;
    set_token(token: string, silent?: boolean): JQuery;
    get_token(silent?: boolean): string;
    set_mask(mask: boolean | string): JQuery;
    get_mask(): boolean | string;
    set_prompt(prompt: string): JQuery;
    get_prompt(): string;
    set_name(name: string): JQuery;
    get_name(): string;
    history(): string[];
    history_state(state: any): JQuery;
    next(): JQuery;
    prev(): JQuery;
    purge(): JQuery;
    insert(text: string): JQuery;
    set_command(command: string): JQuery;
    get_command(): string;
    complete(command?: string): string[];
    settings(): JQueryTerminalOptions;
    commands(): { [key: string]: Function | string };
    import_commands(): JQuery;
    export_commands(): { [key: string]: Function | string };
    import_settings(): JQuery;
    export_settings(): JQueryTerminalOptions;
    import_view(): JQuery;
    export_view(): any;
    level(): number;
    push(commands: any, options?: any): JQuery;
    pop(): JQuery;
    reset(): JQuery;
    purge_commands(): JQuery;
    resize(width?: number, height?: number): JQuery;
    flush(): JQuery;
    update(line: number, str: string): JQuery;
    env(name: string, value?: any): any;
    exec(command: string, options?: any): JQuery;
    last_id(): number;
    before_cursor(word?: boolean): string;
    after_cursor(): string;
    position(): number;
    offset(): { top: number; left: number };
    visible(): boolean;
    id(): string;
    enabled(): boolean;
    enable(): JQuery;
    disable(): JQuery;
    signature(name: string, version: string): JQuery;
    version(): string;
    cmd(): any;
    keymap(shortcut: string, fn: Function): JQuery;
    keymap(): { [key: string]: Function };
    option(name: string, value?: any): any;
    invoke_key(shortcut: string): JQuery;
    read(message: string, callback: (result: string) => void): JQuery;
    push_message(text: string, bottom?: boolean): JQuery;
    pop_message(): JQuery;
    messages(): string[];
    set_interpreter(name: string): JQuery;
    get_interpreter(): string;
    refresh(): JQuery;
    displayed_prompt(): string;
    set_displayed_prompt(prompt: string): JQuery;
    slow_print(str: string, callback?: Function): JQuery;
    xml_formatter(): any;
    split_equal(str: string, len: number): string[];
    split_version(version: string): number[];
    valid_version(version: string): boolean;
    parse_command(command: string): any;
    split_command(command: string): string[];
    parse_arguments(command: string): any;
    parse_option(command: string, options: any): any;
    string_diff(a: string, b: string): any;
    substring(str: string, from: number, to?: number): string;
    escape_brackets(str: string): string;
    unescape_brackets(str: string): string;
    have_formatting(str: string): boolean;
    is_formatting(str: string): boolean;
    strip(str: string): string;
    active(): boolean;
    length(): number;
    get(): number;
    eq(index: number): JQuery;
    first(): JQuery;
    last(): JQuery;
    slice(start?: number, end?: number): JQuery;
    map(callback: (index: number, element: Element) => any): JQuery;
    each(callback: (index: number, element: Element) => void): JQuery;
    index(selector?: string | Element | JQuery): number;
    end(): JQuery;
    andSelf(): JQuery;
    pushStack(elements: Element[]): JQuery;
    removeData(key?: string): JQuery;
    promise(type?: string, target?: any): Promise<any>;
    always(alwaysCallback: Function): JQuery;
    done(doneCallback: Function): JQuery;
    fail(failCallback: Function): JQuery;
    progress(progressCallback: Function): JQuery;
    state(): string;
    pipe(doneFilter?: Function, failFilter?: Function, progressFilter?: Function): Promise<any>;
    then(doneCallback: Function, failCallback?: Function, progressCallback?: Function): Promise<any>;
}

interface JQuery {
    terminal: JQueryTerminal;
}

declare module "jquery.terminal" {
    export = $;
}
